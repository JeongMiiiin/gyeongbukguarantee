<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 
3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reserve.manage.list">
	<sql id="whereBranchParam">
		<if test="searchBrName != null and searchBrName != ''">
			<![CDATA[ 
			 AND 
				gb2.br_name like concat('%',#{searchBrName},'%') 
			 ]]> 
		</if>
		<if test="searchMemIdx != null and searchMemIdx != ''">
			<![CDATA[ 
			 AND 
				gb2.mem_idx = #{searchMemIdx}  
			 ]]> 
		</if>
	</sql>
	<sql id="whereParam" >
		<if test="searchHp != null and searchHp != ''">
			<![CDATA[ 
			 AND 
				rl_hp like concat('%',#{searchHp},'%') 
			 ]]> 
		</if>
		<if test="searchName != null and searchName != ''">
			<![CDATA[ 
			 AND 
				rl_name like concat('%',#{searchName},'%') 
			 ]]> 
		</if>
		<if test="searchRlStatus != null and searchRlStatus != ''">
			<![CDATA[ 
			 AND 
				rl_status = #{searchRlStatus} 
			 ]]> 
		</if>
		<if test="searchStartDate != null and searchStartDate != ''">
			<![CDATA[ 
			 AND 
				rl_reserve_date >= #{searchStartDate} 
			 ]]> 
		</if>
		<if test="searchEndDate != null and searchEndDate != ''">
			<![CDATA[ 
			 AND 
				rl_reserve_date <= #{searchEndDate} 
			 ]]> 
		</if>
	</sql>

	<!-- 리스트 조회 -->
	<select id="selectListData" parameterType="ReserveDto" resultMap="CommonDto.ReserveMap">
		SELECT  gr.*,DATE_FORMAT(gr.rl_reserve_date, '%Y-%m-%d') AS rl_reserve_date_str, TIME_FORMAT(gr.rl_reserve_time, '%H:%i') AS rl_reserve_time_str, gb.br_name FROM gb_reserve_list gr
		LEFT JOIN gb_branch gb ON gr.br_idx = gb.br_idx
		WHERE gr.br_idx IN ( SELECT gb2.br_idx FROM gb_branch gb2 WHERE br_deleted_at IS NULL <include refid="whereBranchParam"/> ) AND rl_deleted_at IS NULL
		<include refid="whereParam"/>
		ORDER BY rl_reserve_date DESC, rl_reserve_time DESC
		<![CDATA[			
			LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
		]]>
	</select>
	
	<!-- 총건수 조회 -->
	<select id="selectTotalCnt" parameterType="ReserveDto" resultType="int">
		SELECT COUNT(*) FROM gb_reserve_list gr
		WHERE gr.br_idx IN ((SELECT gb2.br_idx FROM gb_branch gb2 WHERE br_deleted_at IS NULL <include refid="whereBranchParam"/>)) AND gr.rl_deleted_at IS NULL
		<include refid="whereParam"/>
	</select>

	<!-- 상세 데이터 조회 -->
	<select id="selectViewData" parameterType="int" resultMap="CommonDto.ReserveMap">
		SELECT
		*,
		DATE_FORMAT(rl_reserve_date, '%Y-%m-%d') AS rl_reserve_date_str,
		TIME_FORMAT(rl_reserve_time, '%H:%i') AS rl_reserve_time_str
		FROM gb_reserve_list WHERE rl_idx = #{rlIdx}
	</select>
	
	<!--
		params : br_idx -> 해당지점, select_date -> 요청날짜
		result : List<HashMap<String,Object>> 형태의 예약리스트
		지점 요청날짜의 예약 리스트 조회
	-->
	<select id="selectDateTimeList" parameterType="HashMap" resultType="HashMap">
		SELECT DATE_FORMAT(rl_reserve_date, '%Y-%m-%d') AS rl_reserve_date_str, TIME_FORMAT(rl_reserve_time, '%H:%i') AS rl_reserve_time_str, rl_name, rl_hp, rl_status, rl_idx, is_audio FROM gb_reserve_list WHERE br_idx = #{brIdx} AND DATE_FORMAT(rl_reserve_date, '%Y-%m-%d') = #{selectDate} AND DATE_FORMAT(rl_reserve_date, '%Y-%m-%d') >= DATE_FORMAT(now(), '%Y-%m-%d') AND rl_deleted_at IS NULL
		ORDER BY rl_reserve_time, rl_idx
	</select>
	
	<!--
		params : br_idx -> 해당지점, rl_name -> 예약명, rl_hp -> 예약번호, select_date -> 예약날짜, target_time -> 예약시간, rl_business_type -> 
		result : List<HashMap<String,Object>> 형태의 예약리스트
		중복예약이 있는지 체크
	-->
	<select id="checkReserve" parameterType="HashMap" resultType="int">
		SELECT COUNT(*) FROM gb_reserve_list WHERE br_idx = #{brIdx} AND rl_name = #{rlName}
		AND rl_hp = #{rlHp} AND DATE_FORMAT(rl_reserve_date, '%Y-%m-%d') = #{selectDate} 
		AND rl_reserve_time = #{targetTime} AND rl_business_type = #{rlBusinessType} AND rl_deleted_at IS NULL
		LIMIT 1
	</select>

	<!-- 데이터 추가 -->
	<insert id="insertData" parameterType="ReserveDto">
		INSERT INTO gb_reserve_list (br_idx, rl_status, rl_direct, rl_name, rl_hp, rl_business_type, rl_reserve_date, rl_reserve_time) VALUES (#{brIdx}, #{rlStatus}, #{rlDirect}, #{rlName}, #{rlHp}, #{rlBusinessType}, #{rlReserveDate}, #{rlReserveTime})
	</insert>

	<!-- 예약마감 날짜 추가 -->
	<insert id="updateFullReserve" parameterType="HashMap">
		INSERT INTO gb_branch_date_setting (br_idx, gbds_status, gbds_date, gbds_applied_at) VALUES (#{brIdx}, 3, #{selectDate}, DATE_FORMAT(now(), '%Y-%m-%d'))
	</insert>
	
	<!-- 예약마감 날짜에 관한 데이터 물리삭제 -->
	<delete id="removeFullReserve" parameterType="HashMap">
		DELETE FROM gb_branch_date_setting WHERE br_idx = #{brIdx} AND gbds_status = 3 AND DATE_FORMAT(gbds_date, '%Y-%m-%d') = #{selectDate}
	</delete>
	
	<!-- 업데이트 -->
	<update id="updateData" parameterType="ReserveDto">
		UPDATE gb_reserve_list SET
		rl_direct = #{rlDirect}
		,rl_name = #{rlName}
		,rl_hp = #{rlHp}
		,rl_business_type = #{rlBusinessType}
		,rl_reserve_date = #{rlReserveDate}
		,rl_reserve_time = #{rlReserveTime}
		WHERE rl_idx = #{rlIdx} LIMIT 1
	</update>
	
	<!-- 예약 상태 변경 -->
	<update id="updateReserve" parameterType="HashMap">
		UPDATE gb_reserve_list SET rl_status = #{rlStatus} WHERE rl_idx = #{rlIdx} LIMIT 1
	</update>
	
	<!-- 논리적 삭제 -->
	<update id="deleteData" parameterType="int">
		UPDATE gb_reserve_list SET rl_deleted_at = now() WHERE rl_idx = #{rlIdx} LIMIT 1
	</update>
	
	<!-- 
		params : br_idx -> 해당 지점 고유번호
		result : List<reserveDto> 
		지점의 예약 리스트 조회
	 -->
	<select id="selectReserveList" parameterType="int" resultMap="CommonDto.ReserveMap">
		SELECT gr.*,DATE_FORMAT(gr.rl_reserve_date, '%Y-%m-%d') AS rl_reserve_date_str, TIME_FORMAT(gr.rl_reserve_time, '%H:%i') AS rl_reserve_time_str, gb.br_name FROM gb_reserve_list gr
		LEFT JOIN gb_branch gb ON gr.br_idx = gb.br_idx
		WHERE gr.br_idx IN ( SELECT gb2.br_idx FROM gb_branch gb2 WHERE gb2.br_deleted_at IS NULL ) AND gr.rl_deleted_at IS NULL AND gr.br_idx = #{brIdx}
		ORDER BY gr.rl_reserve_date DESC, gr.rl_reserve_time DESC
	</select>
	
	<!--
		params : br_idx -> 해당 지점
		result : int 형 count수
		지점에 예약이 있는지 확인
		용도 ) 지점에 예약이 있을 시 삭제를 막기 위해 사용
	-->
	<select id="branchCheckReserve" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM gb_reserve_list WHERE br_idx = #{brIdx} AND rl_status != 3 AND DATE_FORMAT(rl_reserve_date, '%Y-%m-%d') >= DATE_FORMAT(now(), '%Y-%m-%d') AND rl_deleted_at IS NULL
	</select>
	
	<!--
	params : 없음
	result : List<reserveDto>
	내일 예약 리스트 조회
	용도 ) 스케줄러에서 전날 오후 5시에 예약확인 문자를 보내기 위함.
	-->
	<select id="selectTomorrowReserveList" resultMap="CommonDto.ReserveMap">
		SELECT gr.*,DATE_FORMAT(gr.rl_reserve_date, '%Y-%m-%d') AS rl_reserve_date_str, TIME_FORMAT(gr.rl_reserve_time, '%H:%i') AS rl_reserve_time_str, gb.br_name, gb.br_address FROM gb_reserve_list gr
		LEFT JOIN gb_branch gb ON gr.br_idx = gb.br_idx
		WHERE gr.br_idx IN ( SELECT gb2.br_idx FROM gb_branch gb2 WHERE gb2.br_deleted_at IS NULL ) AND gr.rl_deleted_at IS NULL AND DATE_FORMAT(gr.rl_reserve_date, '%Y-%m-%d') = DATE_FORMAT(DATE_ADD(now(), INTERVAL 1 DAY), '%Y-%m-%d')
		ORDER BY gr.rl_reserve_date DESC, gr.rl_reserve_time DESC
	</select>
	
	<select id="reserveListAPI" parameterType="HashMap" resultType="HashMap">
		SELECT gr.rl_name, gr.rl_hp, gr.rl_business_type, gb.br_name, gb.br_category_name, DATE_FORMAT(gr.rl_reserve_date, '%Y-%m-%d') AS rl_reserve_date_str, TIME_FORMAT(gr.rl_reserve_time, '%H:%i') AS rl_reserve_time_str FROM gb_reserve_list gr LEFT JOIN gb_branch gb ON gr.br_idx = gb.br_idx WHERE gr.rl_deleted_at IS NULL AND DATE_FORMAT(gr.rl_reserve_date,'%Y-%m-%d') >= #{startDate} AND #{endDate} >= DATE_FORMAT(gr.rl_reserve_date,'%Y-%m-%d')
		ORDER BY gr.rl_reserve_date DESC, gr.rl_idx DESC  
	</select>
	
	<insert id="requestReserveAPI" parameterType="HashMap">
		INSERT INTO INSERT INTO gb_reserve_list (br_idx, rl_status, rl_direct, rl_name, rl_hp, rl_business_type, rl_reserve_date, rl_reserve_time) VALUES (#{brIdx}, #{rlStatus}, 3, #{rlName}, #{rlHp}, #{rlBusinessType}, #{rlReserveDate}, #{rlReserveTime})
	</insert>
	
	<select id="selectTargetReserve" parameterType="HashMap" resultType="int">
		SELECT COUNT(*) FROM gb_reserve_list WHERE rl_deleted_at IS NULL AND br_idx = #{brIdx} AND DATE_FORMAT(rl_reserve_date,'%Y-%m-%d') = #{rlReserveDate} AND TIME_FORMAT(rl_reserve_time, '%H:%i') = #{rlReserveTime}
	</select>
	
	<update id="updateAudio" parameterType="HashMap">
		UPDATE gb_reserve_list SET is_audio = '1' WHERE rl_idx = #{rlIdx}
	</update>
	
</mapper>